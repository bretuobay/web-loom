/* packages/design-core/src/design-system/layout/container.css */

.container {
  width: 100%;
  margin-left: auto;
  margin-right: auto;
  padding-left: var(--spacing-gutter);
  padding-right: var(--spacing-gutter);
}

/* Responsive container widths based on breakpoints */
/* Ensure breakpoint tokens are defined, e.g., --breakpoint-sm: 640px; */
@media (min-width: var(--breakpoint-sm, 640px)) { /* Default fallback if token not present */
  .container {
    max-width: calc(var(--breakpoint-sm, 640px) - (var(--spacing-gutter) * 2));
  }
}
@media (min-width: var(--breakpoint-md, 768px)) {
  .container {
    max-width: calc(var(--breakpoint-md, 768px) - (var(--spacing-gutter) * 2));
  }
}
@media (min-width: var(--breakpoint-lg, 1024px)) {
  .container {
    max-width: calc(var(--breakpoint-lg, 1024px) - (var(--spacing-gutter) * 2));
  }
}
@media (min-width: var(--breakpoint-xl, 1280px)) {
  .container {
    max-width: calc(var(--breakpoint-xl, 1280px) - (var(--spacing-gutter) * 2));
  }
}

/* Simple Grid System */
.grid {
  display: grid;
  gap: var(--spacing-gutter);
}

/* Example: 12-column grid */
.grid-cols-1 { grid-template-columns: repeat(1, minmax(0, 1fr)); }
.grid-cols-2 { grid-template-columns: repeat(2, minmax(0, 1fr)); }
.grid-cols-3 { grid-template-columns: repeat(3, minmax(0, 1fr)); }
.grid-cols-4 { grid-template-columns: repeat(4, minmax(0, 1fr)); }
.grid-cols-5 { grid-template-columns: repeat(5, minmax(0, 1fr)); }
.grid-cols-6 { grid-template-columns: repeat(6, minmax(0, 1fr)); }
.grid-cols-7 { grid-template-columns: repeat(7, minmax(0, 1fr)); }
.grid-cols-8 { grid-template-columns: repeat(8, minmax(0, 1fr)); }
.grid-cols-9 { grid-template-columns: repeat(9, minmax(0, 1fr)); }
.grid-cols-10 { grid-template-columns: repeat(10, minmax(0, 1fr)); }
.grid-cols-11 { grid-template-columns: repeat(11, minmax(0, 1fr)); }
.grid-cols-12 { grid-template-columns: repeat(12, minmax(0, 1fr)); }

/* Column spans */
.col-span-1 { grid-column: span 1 / span 1; }
.col-span-2 { grid-column: span 2 / span 2; }
.col-span-3 { grid-column: span 3 / span 3; }
.col-span-4 { grid-column: span 4 / span 4; }
.col-span-5 { grid-column: span 5 / span 5; }
.col-span-6 { grid-column: span 6 / span 6; }
.col-span-7 { grid-column: span 7 / span 7; }
.col-span-8 { grid-column: span 8 / span 8; }
.col-span-9 { grid-column: span 9 / span 9; }
.col-span-10 { grid-column: span 10 / span 10; }
.col-span-11 { grid-column: span 11 / span 11; }
.col-span-12 { grid-column: span 12 / span 12; }

/* Add .bordered-component for a bordered container/grid if needed */
.container.bordered-component,
.grid.bordered-component {
  padding-top: var(--spacing-4);
  padding-bottom: var(--spacing-4);
}

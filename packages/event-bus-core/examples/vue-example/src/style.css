/* style.css - For Vue example specific global styles or overrides */

/* Most global styles (body, links, layout containers, cards, etc.)
   are now handled by assets/shared-styles.css */

/* It's good practice to keep :root variables if they are used by Vue components
   or for theming, but ensure they don't conflict with shared-styles.css.
   The :root variables from the original file seem to be related to a light/dark theme
   and default component styling, which might be fine to keep if that theme is intended.
   However, shared-styles.css sets its own color scheme (light theme with blue accents).
   For consistency with the request, we should prioritize shared-styles.css.
*/

/* Default :root from shared-styles.css will take precedence for body, color etc. */
/* We can keep font-smoothing options here if desired. */
:root {
  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  /* color-scheme: light dark; -- Controlled by shared-styles body */
  /* color: rgba(255, 255, 255, 0.87); -- Controlled by shared-styles body */
  /* background-color: #242424; -- Controlled by shared-styles body */
}

/* Link styles are primarily handled by shared-styles.css.
   The 'a' and 'a:hover' rules here would conflict or be overridden.
   It's better to remove them to rely on shared-styles.css for link styling.
*/
/*
a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}
*/

/* Body styles (margin, display, min-height, background-color, font-family)
   are now in shared-styles.css. Remove conflicting rules.
*/
/*
body {
  margin: 0;
  display: flex;
  min-height: 100vh;
}
*/


/* General h1 styles can be kept if they don't conflict with specific component styles
   or shared utility classes. shared-styles.css has more specific h1 styles within
   .post-detail-container etc.
*/
h1 {
  /* font-size: 3.2em; -- This is quite large, shared-styles has more contextual h1 sizes */
  /* line-height: 1.1; */
}


/* Button styles: shared-styles.css doesn't have generic button styles,
   but it does style .card-link which acts like a button.
   If generic buttons are used elsewhere and need this styling, it can be kept.
   However, for consistency with the requested color palette, these button colors
   (e.g. #646cff) might need adjustment or removal if not used.
   For now, I will keep them commented out to prioritize shared-styles.
*/
/*
button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  cursor: pointer;
  transition: border-color 0.25s;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}
*/

/* The .card style here (padding: 2em) will be overridden by the more specific
   .card styles in shared-styles.css. It's safe to remove.
*/
/*
.card {
  padding: 2em;
}
*/

/* #app specific styles: shared-styles.css uses .app-container for the main wrapper.
   If #app in Vue is the root element that .app-container is applied to,
   these might conflict or be redundant.
   shared-styles.css .app-container takes full width. This limits width to 1280px.
   To ensure full screen as requested, this max-width should be removed or overridden.
   The .app-container in shared-styles.css already handles full width.
*/
#app {
  /* max-width: 1280px; */
  /* Remove to allow .app-container to control width */
  margin: 0 auto;
  /* This is fine, .app-container also has it */
  /* padding: 2rem; */
  /* Padding is handled by .app-container */
  /* text-align: center; */
  /* Specific components should handle text alignment */
  width: 100%;
  /* Ensure #app itself also tries to be full width */
  height: 100vh;
  /* Ensure #app can fill height */
  display: flex;
  flex-direction: column;

}


/* The @media (prefers-color-scheme: light) rules here define a light theme.
   shared-styles.css also defines a light theme. These will conflict.
   Prioritize shared-styles.css for consistency.
*/
/*
@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
  }

  body {
    background-color: #eef;
  }

  a:hover {
    color: #747bff;
  }

  button {
    background-color: #f9f9f9;
  }
}
*/